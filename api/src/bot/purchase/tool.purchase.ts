import { dataSource } from '@/data.source';
import { Tool } from '@/entity/tool.entity';
import { User } from '@/entity/user.entity';
import { UserTool } from '@/entity/user.tool.entity';
import { mention } from '@/utils/telegram';

interface ToolPurchaseReply {
  success: boolean;
  text: string;
}

export const toolPurchase = async (tool: Tool, user: User): Promise<ToolPurchaseReply> => {
  if (user.balance < tool.price) {
    return {
      success: false,
      text: [
        `${tool.description} —Å—Ç–æ–∏—Ç “∞${tool.price}`,
        user.balance > 0
          ? `–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ “∞${user.balance}`
          : '–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ ü§∑‚Äç‚ôÇÔ∏è',
      ].join('\n'),
    };
  }

  user.balance -= tool.price;

  const userTool = dataSource.manager.create(UserTool, {
    user,
    tool,
  });

  await dataSource.manager.save(userTool);
  await dataSource.manager.save(user);

  return {
    success: true,
    text: [
      `${mention(user)}, *${tool.description.toLowerCase()}* - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! üëç`,
      '–ó–∞—Ö–æ–¥–∏ –µ—â—ë, —É –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á–µ–º —Ç–µ–±—è –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å üëã',
    ].join('\n\n'),
  };
};
