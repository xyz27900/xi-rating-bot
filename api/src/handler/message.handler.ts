import { Middleware } from 'grammy';
import { SELF_DECREASE_IMAGE_URL, SELF_INCREASE_IMAGE_URL } from '@/config';
import { giftService, messageRatingService, userService } from '@/core/services';
import { dataSource } from '@/data.source';
import { randomElement } from '@/utils/array';
import { mention } from '@/utils/telegram';

export const messageHandler: Middleware = async (ctx) => {
  const { from, message } = ctx;
  if (!message || !from) {
    return;
  }

  const { reply_to_message: replyMessage } = message;
  if (!replyMessage || !message.text) {
    return;
  }

  const messageText = message.text.trim();
  const { from: to } = replyMessage;
  if (!to) {
    return;
  }

  const userFrom = await userService.getUserById(from.id);
  const userTo = await userService.getUserById(to.id);

  if (!userFrom || !userTo) {
    return;
  }

  const isMessageRated = await messageRatingService.checkIfAlreadyRated(userFrom, replyMessage.message_id);
  if (isMessageRated) {
    const text = [
      `${mention(userFrom)}, —Ç—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!`,
      '–í–µ–ª–∏–∫–æ–≥–æ –≤–æ–∂–¥—è –Ω–µ –æ–±–º–∞–Ω–µ—à—å! üò†',
    ].join('\n\n');

    await ctx.reply(text, {
      reply_to_message_id: replyMessage.message_id,
      parse_mode: 'Markdown',
    });

    return;
  }

  if (messageText !== '+' && messageText !== '-') {
    return;
  }

  if (userFrom.id === userTo.id) {
    const increasePhrases = [
      '–¢—ã –¥—É–º–∞–ª, —á—Ç–æ —Ç—ã —É–º–Ω–µ–µ –≤–æ–∂–¥—è? ü§®',
      '–£ —Ç–µ–±—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±–º–∞–Ω—É—Ç—å –ø–∞—Ä—Ç–∏—é üëä',
      '–ó–ª–æ–π —Ö–∏—Ç—Ä—ã–π –ò–≤–∞–Ω, —É —Ç–µ–±—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è üëé',
    ];

    const decreasePhrases = [
      '–í–æ –µ–±–ª–∞–Ω ü§£',
      '–ü—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π –ò–≤–∞–Ω, —Ç—ã –¥—É—Ä–∞–∫ ü§°',
      '–¢—ã —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É, –Ω–æ –ø–∞—Ä—Ç–∏—è –ø—Ä–æ—â–∞–µ—Ç —Ç–µ–±–µ —ç—Ç–æ üòá',
    ];

    const phrases = messageText === '+' ? increasePhrases : decreasePhrases;
    const imageUrl = messageText === '+' ? SELF_INCREASE_IMAGE_URL : SELF_DECREASE_IMAGE_URL;

    await ctx.replyWithPhoto(imageUrl, {
      reply_to_message_id: replyMessage.message_id,
      caption: randomElement(phrases),
    });

    return;
  }

  let text: string;

  if (messageText === '-' && userTo.rating === 0) {
    text = `${mention(userTo)} —É–∂–µ –Ω–∞ –¥–Ω–µ –Ω–∞—à–µ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞ üìâ\n\n–ï–≥–æ —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞–≤–µ–Ω –Ω—É–ª—é üòÇ`;
    await ctx.reply(text, { parse_mode: 'Markdown' });
    return;
  }

  if (messageText === '+') {
    userTo.rating += 150;

    const gifts = await giftService.getGiftsToGive(userTo);
    const userGifts = await giftService.createUserGifts(userTo, gifts);
    await dataSource.manager.save(userGifts);

    const phrases = [
      '–í–µ–ª–∏–∫–∏–π –≤–æ–∂–¥—å Xi –¥–æ–≤–æ–ª–µ–Ω —Ç–æ–±–æ–π üòÅ',
      '–°–ª–∞–≤–∞ –Ω–∞—à–µ–º—É –≤–µ–ª–∏–∫–æ–º—É –≤–æ–∂–¥—é! ü§ó',
      '–ü–∞—Ä—Ç–∏—è –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π! üòé',
    ];

    const congratulatoryText = gifts.length > 0
      ? `*–¢—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –ø–∞—Ä—Ç–∏–∏ üéâ*\n${gifts.map(gift => `‚Ä¢ ${gift.name}`).join('\n')}`
      : randomElement(phrases);

    text = `${mention(userTo)}, *+150* –±–∞–ª–ª–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ üëç\n\n${congratulatoryText}`;
  } else {
    userTo.rating = Math.max(0, userTo.rating - 150);

    const gifts = await giftService.getGiftsToTake(userTo);
    await dataSource.manager.remove(gifts);

    const phrases = [
      '–í–µ–ª–∏–∫–∏–π –≤–æ–∂–¥—å Xi –Ω–µ–¥–æ–≤–æ–ª–µ–Ω —Ç–æ–±–æ–π üò§',
      '–¢—ã —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –Ω–∞—à–µ–≥–æ –≤–µ–ª–∏–∫–æ–≥–æ –≤–æ–∂–¥—è ‚òπÔ∏è',
      '–°–µ–π—á–∞—Å –∂–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏ –ø–æ–∑–æ—Ä–∏—Ç—å –ø–∞—Ä—Ç–∏—é! üò°',
    ];

    const accusatoryText = gifts.length > 0
      ? `*–ü–∞—Ä—Ç–∏—è –æ—Ç–±–∏—Ä–∞–µ—Ç —É —Ç–µ–±—è üòß*\n${gifts.map(gift => `‚Ä¢ ${gift.gift.name}`).join('\n')}`
      : randomElement(phrases);

    text = `${mention(userTo)}, *-150* –±–∞–ª–ª–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ üëé\n\n${accusatoryText}`;
  }

  const messageRating = messageRatingService.createMessageRating(userFrom, replyMessage.message_id);
  await dataSource.manager.save(messageRating);
  await dataSource.manager.save(userTo);

  await ctx.reply(text, { parse_mode: 'Markdown' });
};
