name: Production Release

on:
  push:
    tags:
      - 'v*'

jobs:
  quality-assurance:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm install

      - name: Lint "common" package
        run: |
          cd common
          npm run lint

      - name: Build "common" package
        run: |
          cd common
          npm run build

      - name: Lint "api" package
        run: |
          cd api
          npm run lint

      - name: Build "api" package
        run: |
          cd api
          npm run build

      - name: Lint "ui" package
        run: |
          cd ui
          npm run lint

      - name: Build "ui" package
        run: |
          cd ui
          npm run build

  npm-packages:
    needs: quality-assurance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install dependencies
        run: npm install

      - name: Build "common" package
        run: |
          cd common
          npm run build

      - name: Publish "common" package
        run: |
          cd common
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ACCESS_TOKEN }}

  deploy:
    needs: npm-packages
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Heroku Container Registry
        run: echo ${{ secrets.HEROKU_API_KEY }} | docker login -u ${{ secrets.HEROKU_EMAIL }} registry.heroku.com --password-stdin

      - name: Build Docker image
        run: docker build --build-arg ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }} --build-arg NODE_ENV=production --tag registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .

      - name: Push Docker image
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: Deploy to Heroku
        run: |
          heroku auth:token
          heroku container:release web --app ${{ secrets.HEROKU_APP_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Get the version
        id: version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      - name: Send message to Telegram channel
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_DEV_CHANNEL_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: html
          disable_web_page_preview: true
          message: |
            #production #release

            <b>‚úÖ Deployed to Heroku</b>

            New build <a href="${{ env.GITHUB_LINK }}">${{ steps.short_sha.outputs.short_sha }}</a> was successfully deployed to <b>production environment</b>

            <b>ü§ñ Bot</b>
            @xi_rating_bot

            <b>üè∑ Version</b>
            ${{ steps.version.outputs.version }}
        env:
          GITHUB_LINK: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
