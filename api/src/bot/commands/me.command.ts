import { Context } from 'grammy';
import { getUserHelper } from '@/bot/helpers/get.user.helper';
import { dataSource } from '@/data.source';
import { UserGift } from '@/entity/user.gift.entity';
import { UserTool } from '@/entity/user.tool.entity';
import { mention } from '@/utils/telegram';

export const meCommand = async (ctx: Context): Promise<void> => {
  const user = await getUserHelper(ctx);
  if (!user) {
    return;
  }

  const userTools = await dataSource.manager.find(UserTool, {
    where: { user },
    relations: ['tool'],
  });

  const userGifts = await dataSource.manager.find(UserGift, {
    where: { user },
    relations: ['gift'],
  });

  const dataText = [
    `–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ *${user.rating}*`,
    `–í –∫–æ—à–µ–ª—å–∫–µ *“∞${user.balance}*`,
  ].join('\n');

  const toolsText = userTools.length > 0
    ? [
      '*–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã üõ†*',
      ...userTools.map(userTool => `‚Ä¢ ${userTool.tool.description}`),
    ].join('\n')
    : '–í —Ç–≤–æ–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–∫–∞ —á—Ç–æ –ø—É—Å—Ç–æ üö´';

  const giftsText = userGifts.length > 0
    ? [
      '*–ü–æ–¥–∞—Ä–∫–∏ –æ—Ç –ø–∞—Ä—Ç–∏–∏ üéÅ*',
      ...userGifts.map(userGift => `‚Ä¢ ${userGift.gift.name}`),
    ].join('\n')
    : '–¢—ã –ø–ª–æ—Ö–æ —Å–µ–±—è –≤–µ–ª –∏ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç –ø–∞—Ä—Ç–∏–∏ üò¢';

  const text = [
    mention(user),
    dataText,
    toolsText,
    giftsText,
  ].join('\n\n');

  await ctx.reply(text, { parse_mode: 'Markdown' });
};
