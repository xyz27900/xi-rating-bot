import { randomElement } from '@/utils/array';

export class TipService {
  private static extractData(string: string): [string, string] | null {
    const match = string.match(/(.*)\s–∏–ª–∏\s(.*[^?])/i);
    if (match) {
      const [/* full */, first, second] = match;
      return [first, second].map(item => item.trim()) as [string, string];
    } else {
      return null;
    }
  }

  public process(data: string): string {
    const items = TipService.extractData(data);
    if (!items) {
      return '—á—Ç–æ–±—ã —Å–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≤–µ—Ç —É –ø–∞—Ä—Ç–∏–∏, –Ω–∞–ø–∏—à–∏\n\n```\/tip –¥–∞ –∏–ª–∏ –Ω–µ—Ç```';
    }

    if (Math.random() < 0.1) {
      const phrases = [
        '–ø–∞—Ä—Ç–∏—è —Å—á–∏—Ç–∞–µ—Ç —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ—É–º–µ—Å—Ç–Ω—ã–º üòë',
        '—ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ—Å–∫–æ—Ä–±–ª—è–µ—Ç –Ω–∞—à–µ–≥–æ –≤–æ–∂–¥—è ü§¨',
        '–ø–µ—Ä–µ—Å—Ç–∞–Ω—å –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –ø–∞—Ä—Ç–∏—é –ø–æ –ø—É—Å—Ç—è–∫–∞–º üôÑ',
      ];

      return randomElement(phrases);
    } else {
      const phrases = [
        '–ø–∞—Ä—Ç–∏—è —Ä–µ—à–∏–ª–∞, —á—Ç–æ',
        '–≤–µ–ª–∏–∫–∏–π –≤–æ–∂–¥—å –≥–æ–≤–æ—Ä–∏—Ç',
        '–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è, –∫–æ–Ω–µ—á–Ω–æ –∂–µ',
      ];

      return `${randomElement(phrases)} ${randomElement(items)}`;
    }
  }
}

export const tipService = new TipService();
